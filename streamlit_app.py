import streamlit as st


import requests
from beautifulsoup4 import Article
from sklearn.externals import joblib  # se usar modelo treinado
# ou use HuggingFace, transformers, etc.

# Configura√ß√£o do app
st.set_page_config(page_title="Detec√ß√£o de Desinforma√ß√£o Odontol√≥gica", layout="centered")
st.title("ü¶∑ DetectaOdonto ‚Äì IA contra desinforma√ß√£o na odontologia")

# Entrada do usu√°rio
url = st.text_input("Cole aqui a URL de uma postagem ou mat√©ria:")

if st.button("Analisar"):
    if url:
        try:
            # Coleta e limpeza do conte√∫do
            artigo = Article(url)
            artigo.download()
            artigo.parse()
            texto = artigo.text

            st.subheader("üìù Texto extra√≠do:")
            st.write(texto[:800] + "...")  # mostra s√≥ um peda√ßo

            # Detectar poss√≠veis claims (exemplo bem simples)
            claims = [frase for frase in texto.split(".") if any(x in frase.lower() for x in ["cura", "substitui", "elimina", "resolve", "sem dor"])]

            st.subheader("üîç Claims detectados:")
            for i, claim in enumerate(claims):
                st.markdown(f"**Claim {i+1}:** {claim.strip()}")

                # Aqui entraria seu classificador (exemplo com score simulado)
                import random
                score = random.random()

                if score > 0.6:
                    st.error("‚ö†Ô∏è Potencial desinforma√ß√£o")
                else:
                    st.success("‚úÖ Baixo risco de desinforma√ß√£o")

                # Resposta da IA (simula√ß√£o por enquanto)
                st.caption("_Resposta explicativa gerada pela IA aqui..._")

                # Valida√ß√£o pelo especialista
                st.radio(f"Voc√™ concorda com a avalia√ß√£o do Claim {i+1}?", ["Sim", "N√£o"], key=f"validacao_{i+1}")

        except Exception as e:
            st.error(f"Erro ao processar URL: {e}")
